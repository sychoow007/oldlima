@inherits Merchello.Web.Mvc.MerchelloViewPage<IPublishedContent>
@using System.Web.Mvc.Html
@using Merchello.Bazaar
@using Merchello.Core.Models
@using Merchello.Web
@using Umbraco.Core.Models
@using Umbraco.Web


<div class="navbar navbar-default">
    <div class="container">
		<a class="navbar-brand" href="@BazaarContentHelper.GetStoreRoot().Url">@BazaarContentHelper.StoreTitle()</a>
		<div class="navbar-header">
			<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
				<span class="sr-only">Toggle navigation</span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
			</button>
		</div>

        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                @foreach (var group in BazaarContentHelper.GetProductGroupsContent())
                {
                    <li><a href="@group.Url">@group.Name</a></li>
                }
                @{
                    var collections = BazaarContentHelper.GetProductCollectionContent().ToArray();
                    @collections.Count()
                }
                @if (collections.Any())
                {
                    <li role="presentation" class="dropdown">
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                            Categories <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            @foreach (var collection in collections)
                            {
                                <li><a href="@collection.Url">@collection.Name</a></li>
                            }
                        </ul>
                    </li>
                }
            </ul>
            <ul class="nav pull-right navbar-nav">
                @if (BazaarContentHelper.ShowAccount())
                {
                    <li class="dropdown">
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#">@GetAccountDropDownName(CurrentCustomer) <b class="caret"></b></a>
                        <ul class="dropdown-menu" id="swatch-menu">
                            @if (CurrentCustomer.IsAnonymous)
                            {
                                <li><a href="@BazaarContentHelper.GetRegistrationContent().Url">Sign Up / Login</a></li>
                            }
                            else
                            {
                                <li><a href="@BazaarContentHelper.GetAccountContent().Url">Account</a></li>
                                var purchaseHistory = BazaarContentHelper.GetAccountContent().Descendant("BazaarAccountHistory");
                                if (purchaseHistory != null)
                                    {
                                    <li><a href="@purchaseHistory.Url">Purchase History</a></li>     
                                    }
                                <li>@Html.ActionLink("Logout", "HandleSignOut", "MembershipOperations", new { area = "Bazaar" }, null)</li>
                            }
                        </ul>
                    </li>
                }
                @if (!CurrentCustomer.IsAnonymous && BazaarContentHelper.ShowWishList())
                {
                    <li><a href="@BazaarContentHelper.GetWishListContent().Url">Wish List (@(((ICustomer)CurrentCustomer).WishList().TotalItemCount))</a></li>
                }
                <li><a href="@BazaarContentHelper.GetBasketContent().Url">Basket (@CurrentCustomer.Basket().TotalItemCount)</a></li>
            </ul>

        </div><!-- /.nav-collapse -->
    </div><!-- /navbar-inner -->
</div>

@functions
{
    /// <summary>
    /// Returns the customer name or "Account" for the Account link based on login status
    /// </summary>
    /// <param name="currentCustomer">Mechello's <see cref="ICustomerBase"/></param>
    /// <returns>A string label for the Acccoun tab</returns>
    /// <remarks>
    /// A bit hacky here, but it does the trick.
    /// </remarks>
    private string GetAccountDropDownName(ICustomerBase currentCustomer)
    {
        if (currentCustomer.IsAnonymous) return "Account";

        var customer = (ICustomer)currentCustomer;
        var name = customer.FullName;

        if (!string.IsNullOrEmpty(name)) return name;

        return "Account";
    } 

}
